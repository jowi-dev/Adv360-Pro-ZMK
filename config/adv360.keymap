
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL   &kp NUMBER_1           &kp N2          &kp N3           &kp N4  &kp N5            &kp LESS_THAN                                                                 &kp GREATER_THAN  &kp N6            &kp N7             &kp N8   &kp N9    &kp N0  &kp MINUS
   &kp TAB        &kp SQT        &kp COMMA      &kp PERIOD            &kp P   &kp Y                 &kp LEFT                                                                           &kp UP   &kp F             &kp G              &kp C    &kp R     &kp B   &kp FSLH
   &kp ESC          &kp A            &kp O           &kp E            &kp U   &kp I                &kp RIGHT       &kp LCTRL  &kp LALT                  &kp LGUI  &kp RCTRL          &kp DOWN   &kp D             &kp H              &kp T    &kp N     &kp S   &kp BSLH
 &kp LSHFT  &kp SEMICOLON            &kp Q           &kp J            &kp K   &kp X                                              &mo 4                     &mo 3                                &kp L             &kp M              &kp W    &kp V     &kp Z  &kp RSHFT
 &kp TILDE      &kp COLON  &kp EXCLAMATION  &kp LEFT_BRACE  &kp RIGHT_BRACE                         &kp BSPC  &kp UNDERSCORE     &mo 2                    &tog 1  &kp ENTER         &kp SPACE          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DEL  &kp PLUS  &kp GRAVE
            >;
        };

        layer_Qwerty {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp N7     &kp N8            &kp N9     &kp N0  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp U      &kp I             &kp O      &kp P   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp J      &kp K             &kp L   &kp SEMI    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp M  &kp COMMA        &kp PERIOD  &kp SLASH  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp SPACE          &kp UP   &kp DOWN  &kp LEFT_BRACKET   &kp RBKT     &trans
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3        &kp F7        &kp F8        &kp F9       &kp F10    &kp F11       &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none   &kp PERCENT  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS     &kp SLASH
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none    &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp PLUS  &kp ASTERISK
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL        &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans                      &trans        &trans        &trans     &trans        &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_Layer__4 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
